<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Suriya on Suriya&#39;s site</title>
    <link>https://suriya.cc/</link>
    <description>Recent content in Suriya on Suriya&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jul 2022 22:15:00 +0000</lastBuildDate><atom:link href="https://suriya.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>superuser changes</title>
      <link>https://suriya.cc/tech/hacks/superuser/</link>
      <pubDate>Wed, 06 Jul 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/superuser/</guid>
      <description>When using aws a lot of times its annoying to type sudo for all commands. instead it is much simpler to just grant super user privileges to the ubuntu user only.
in the ubuntu shell do the following
sudo su - this should switch to a different type of shell. Now, you are in the root user shell.
from there, run
passwd ubuntu This should prompt you to set a new username password This is just icing on the cake for future use.</description>
    </item>
    
    <item>
      <title>visualising Performance</title>
      <link>https://suriya.cc/tech/hacks/profiler/</link>
      <pubDate>Wed, 13 Apr 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/profiler/</guid>
      <description>Interesting: Flame graphs don&amp;rsquo;t show sequentiality. They are not sorted based on time. They are sorted by alphabets. Which means in the flame graphs, if eg. here, the function h() was not run after b(). it&amp;rsquo;s after b() because it&amp;rsquo;s alphabetically after h()
the colours can either be random or provide another dimension (eg. sys calls in red)
Inlining code, makes it difficult to do debugging. JAVA has options to Inline code 9 levels deep.</description>
    </item>
    
    <item>
      <title>The future and The story</title>
      <link>https://suriya.cc/meta/the_future_and_the_story/</link>
      <pubDate>Mon, 11 Apr 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/the_future_and_the_story/</guid>
      <description>Companies are valued much higher when they are pursuing something super big, super into the future. eg, facebook =&amp;gt; meta, amazon =&amp;gt; cloud, etc
This is useful for companies to pump their valuation. see https://news.ycombinator.com/item?id=30916357
this works because the future is unpredictable and un plannable. Which means that the only way we make sense of the future is through stories.</description>
    </item>
    
    <item>
      <title>Theory Stuff</title>
      <link>https://suriya.cc/tech/theory/</link>
      <pubDate>Tue, 15 Mar 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/theory/</guid>
      <description>Theory seems more and more important, as I try to understand the underlying blocks. It&amp;rsquo;s not enough to just know frameworks, I need to know the underlying assumptions and working of hte building blocks. These are all my experiments.
What constitutes theory? Anything that helps me understand a system. Not necessarily just to operate on. This can range from compilers to database to pretty much anything theoretical.</description>
    </item>
    
    <item>
      <title>Fixing chrome extension issues</title>
      <link>https://suriya.cc/tech/building_extension/issues/</link>
      <pubDate>Sat, 12 Feb 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/building_extension/issues/</guid>
      <description>an Unknown error occured while fetching the script. This happens when trying to load the extension. the manifest.json was pointing to the right service worker but still couldn&amp;rsquo;t fetch it. The problem was that there was some import error or other issue in the service-worker script. I fixed it and the whole thing loaded like a breeze.
Changes failing to load in the page we are testing or no changes Reload the page.</description>
    </item>
    
    <item>
      <title>On Morality</title>
      <link>https://suriya.cc/meta/on_morality/</link>
      <pubDate>Mon, 07 Feb 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/on_morality/</guid>
      <description>The whole world seems to be running on this flywheel of pump and dump schemes and it doesn&amp;rsquo;t seem to matter as long the future is far enough.
Elon Musk The guy behind tesla, spaceX and other moonshot companies is an interesting study. For a sect of faithful followers he&amp;rsquo;s an engineer of unmatchable intelligence and insight into everything ranging from mars exploration to synthetic brain chips. Which&amp;hellip; To be honest, sounds a lot like a PT Barnum humbug, to say the least.</description>
    </item>
    
    <item>
      <title>Django issues and quick fixes</title>
      <link>https://suriya.cc/tech/hacks/django/</link>
      <pubDate>Fri, 04 Feb 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/django/</guid>
      <description>CSRF token invalid __URL__ not in trusted origin
This happens because there is no CSRF_TRUSTED_ORIGINS in the settings file. Also make sure that the url does not have an end slash</description>
    </item>
    
    <item>
      <title>Searching for a cross platform framework</title>
      <link>https://suriya.cc/tech/musings/search_cross_platform/</link>
      <pubDate>Sat, 29 Jan 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/musings/search_cross_platform/</guid>
      <description>This is still a WIP and I&amp;rsquo;ll be updating each one as I discover and play with new stuff.
Why Cross platform? There are majorly 2 mobile platforms and 3 desktop platforms. Browsers are acting as a cool layer between this, within the realms of which applications are consistently rendered and usability is not spoilt. This is awesome, because now you don&amp;rsquo;t need 5X the development effort to deliver a software experience But only one.</description>
    </item>
    
    <item>
      <title>Surplus intellectual capacity</title>
      <link>https://suriya.cc/meta/surplus_capacity/</link>
      <pubDate>Sat, 22 Jan 2022 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/surplus_capacity/</guid>
      <description>When I was around 13 or 14 I used to have this wild vision of the world, where everybody was optimising for the betterment of humanity and not &amp;ldquo;wasting&amp;rdquo; their brains on useless stuff like movie gossips and whatnots. My reasoning at the time was that, if only people around me wouldn&amp;rsquo;t bring in non-utilitarian information to me, I would be able to do &amp;ldquo;much&amp;rdquo; more. But in reality it was only my younger self, justifying being lazy and not actively doing stuff and just simply complaining everything around.</description>
    </item>
    
    <item>
      <title>SEO thingies</title>
      <link>https://suriya.cc/tech/SEO/</link>
      <pubDate>Thu, 23 Dec 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/SEO/</guid>
      <description>I try to record my experiments with SEO here</description>
    </item>
    
    <item>
      <title>Installing jekyll for the first time and issues</title>
      <link>https://suriya.cc/tech/hacks/ruby_v_xcode/</link>
      <pubDate>Tue, 21 Dec 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/ruby_v_xcode/</guid>
      <description>I was trying to install jekyll in my local machine and faced this error
/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/mkmf.rb:467:in `try_do&amp;#39;: The compiler failed to generate an executable file. (RuntimeError) You have to install development tools first. this was fixed by running
sudo xcode-select -switch / I checked the manpages It seems like this changes the xcode scope to global. and makes available all the tools and env variables.</description>
    </item>
    
    <item>
      <title>local tunnels with cloudflare</title>
      <link>https://suriya.cc/tech/hacks/local_tunnels/</link>
      <pubDate>Tue, 06 Jul 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/local_tunnels/</guid>
      <description>instantly being able to spin up a tunnel with https in my local machine is useful in a lot of cases
Resources https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/ There is a key.json file + config.yaml file. where all the routing details are stored.
these are located under ~/.cloudflare/
skip caching
go to page rules and add a page rule to cache level: Bypass https://community.cloudflare.com/t/unsolicited-utomatic-caching-via-argo-tunnels-at-cf-edge/308615
Downsides js is cached making it harder to do js development. (stale: 25Jul2022, use page rules) </description>
    </item>
    
    <item>
      <title>ruby hack</title>
      <link>https://suriya.cc/tech/hacks/ruby/</link>
      <pubDate>Tue, 06 Jul 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/ruby/</guid>
      <description>rvm is a tool to maintain a Ruby environment. rvm --default is a shortcut to set the default Ruby environment. rvm use is a shortcut to set the current Ruby environment.</description>
    </item>
    
    <item>
      <title>Searching for a self-hosted VPN</title>
      <link>https://suriya.cc/tech/hacks/VPN/</link>
      <pubDate>Tue, 06 Jul 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/VPN/</guid>
      <description>Goals: Find a VPN solution that would be able to maintain an ACL. No licensing solutions OpenVPN - Not Truly self-hosted, in the sense that you will have to pay for the software in the range of $7 per user. Even if you self host it
Wireguard - only transmission security, no endpoint security.</description>
    </item>
    
    <item>
      <title>On Focus</title>
      <link>https://suriya.cc/meta/on_focus/</link>
      <pubDate>Fri, 16 Apr 2021 22:15:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/on_focus/</guid>
      <description>Experiment1 - Time based &amp;ldquo;focus&amp;rdquo; segments I generally don&amp;rsquo;t believe timing, focus is a bad way of doing it because. The belief is that, when you are in &amp;ldquo;focus&amp;rdquo;, you forget time and get all into it. But, this happens very rarely and hard to replicate.
At least in the short term, I strongly believe that I can gain a lot by segmenting my time.
Method Setup counter for a maximum of 2 hrs.</description>
    </item>
    
    <item>
      <title>The Missing innovation</title>
      <link>https://suriya.cc/meta/missing_innovation/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/missing_innovation/</guid>
      <description>Historically, Most innovation has originated from developed nations and trickled down to developing ones, very much following the Trickle down efffect
And it makes sense. Creating new tech is costly and developing nations cannot afford such R&amp;amp;D costs. As the economy is cash strapped and there are many more mouths to feed. This asymmetry is why &amp;ldquo;developed nations&amp;rdquo; stay ahead of the curve while &amp;ldquo;developing ones&amp;rdquo; trod along. For example India created it&amp;rsquo;s first indigenous microprocessor as late as 2018 and India lags in tech among it&amp;rsquo;s asian counterparts.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/meta/dead_projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/dead_projects/</guid>
      <description>layout: base type: page emoji: 🪦 title: Dead Projects description: Contemplating about the number of dead or half built projects. date: 2021-12-21 22:15:00
I have a lot of unfinished and dead projects. Sometimes, when I feel a little too good about myself. I like to scroll my github projects lists, just to get my eyes off the clouds and face reality :).
What is the point of all those repo&amp;rsquo;s if not as a reminder of bad coding and</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/meta/scripty_apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/meta/scripty_apps/</guid>
      <description>Some apps can be simple scripts accessible over the web running in a tiny tiny server. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/docker_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/docker_learn/README/</guid>
      <description>docker_learn Learning docker, a little deeper this time.
Docker Daemon docker daemon is at the center of everything and it exposes REST apis. this is what is used by docker clients ot pull images and stuff. The dockerd demon listens for docker api requests and manages
Docker client The docker client (docker) is the primary way that many Docker users interact with docker. When a command such as docker run is run.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/github_action_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/github_action_learn/README/</guid>
      <description>github_action_learn Learning github actions</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/golang_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/README/</guid>
      <description>Learning Golang Resources and stuff captured, while learning golang
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) ### Articles List of articles I found useful. - [https://nathany.com/good/](https://nathany.com/good/) - https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go - https://go.dev/blog/error-handling-and-go - https://morsmachine.dk/go-scheduler ### Other resources - gobyexample.com </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/00_let/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/00_let/</guid>
      <description>Understanding let and var The let keyword creates a new variable locally. it is not attached to the global object
let x = 10; //creating a variable if x == 10 { let x = 20; console.log(x); //prints 20 } console.log(x); //prints 10 // ^^^ This x comes from above The var keyword creates a new variable globally.
var a = 10; let b = 10; console.log(window.a); //10 :because the variable is available globally console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/01_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/01_const/</guid>
      <description>Understanding const The const keyword creates a read-only reference to a value.
const CONSTANT_NAME = value; By convention, the constant identifiers are in uppercase. it can be lower case as well though. the variable made from let and var are mutable. But, const can&amp;rsquo;t be changed
const RATE = 0.1; RATE = 0.2; //TypeError Declaring a const without initialising with a value also creates a SyntaxError
const RED; //SyntaxError JavaScript const and Objects The const keyword ensures that the variable it creates is read-only.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/02_default_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/02_default_params/</guid>
      <description>Default Prameters TL;DR function say(message=&amp;#39;Hi&amp;#39;) { console.log(message) } say(); // &amp;#39;Hi&amp;#39; say(&amp;#39;Hello&amp;#39;); //&amp;#39;Hello&amp;#39; Arguments vs Parameters Parameters - what is specified in the function declaration
Arguments - what is passed to the function
function add(x,y) { // ^ ^ Parameters return x+y; } add(100, 200); // ^^^ ^^^ Arguments </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/03_rest_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/03_rest_params/</guid>
      <description>JavaScript rest parameters The rest parameter, shown as (...). A rest parameter allows you to represent an indefinite number of arguments as an array.
function fn(a,b,...args) { // ^^^^^^^ rest parameter available as an array of elements for (const a of args){ //do something with a } } rest parameters are available as an array
wrong way to declare a rest parameter function fn(a,...rest,b) { //error } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/04_spread_operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/04_spread_operator/</guid>
      <description>Using Spread operators Spread operators are used to combine arrays, maps or set.
const odd = [1,3,5]; const combined = [2,4,6, ...odd]; //valid spread const combined1 = [2, ...odd, 4, 6]; //valid as well console.log(combined); // [2,4,6,1,3,5] console.log(combined1); // [2,1,3,5,4,6] the syntax is similar to rest params
Using spread params: var variables = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]; var newvars = [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]; variables.push(...newvars); console.log(variables); // [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] concatenating arrays
let num = [1,2]; let num2 = [3,4]; let allnums = [.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/05_object_literal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/05_object_literal/</guid>
      <description>object literal The goal of this moodely is to make object literals more succinct and powerful by extending the syntax in some ways.
Object property initializer shorthand function createMachine(name, status) { //old way of initializing object return { name: name, status: status } } function createMachineNew(name, status){ //new way of initializing object return { name, status } } other ways of initialising
name = &amp;#39;computer&amp;#39;; status = &amp;#39;on&amp;#39;; //This works as well let machine = { name, status }; Computed property name Prior to ES6, you could use the square brackets ([]) to enable the computed property names for the properties on objects.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/README/</guid>
      <description>js_learn Js is necessary, to be a self sufficient &amp;ldquo;developer&amp;rdquo;. To be able to deliver valuable software to people, in a reliable way. I would be documenting about my learnings here.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/UI/flexbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/UI/flexbox/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://suriya.cc/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/about/</guid>
      <description>Hey!
Wow! you made it here.
I&amp;rsquo;m a software engineer.
I&amp;rsquo;m trying to figure out how to have max impact in the world. i.e. your typical 21st century guy who naively believes he can make the world a better place and have significant impact.
You can refer to my works at my github</description>
    </item>
    
    <item>
      <title>Benchmarking</title>
      <link>https://suriya.cc/tech/golang_learn/benchmarking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/benchmarking/</guid>
      <description>Benchmarking tools are built-in with the &amp;ldquo;testing&amp;rdquo; package
These can be done by writing test files of the format &amp;ldquo;_test.go&amp;rdquo;
Then creating functions with the prefix Benchmark, like so. func Benchmark&amp;lt;name&amp;gt;(b *testing.B)
a simple function that tests a simple multiplication function would be
{% highlight golang linenos %} package go_test import ( &amp;ldquo;testing&amp;rdquo; &amp;ldquo;math/rand&amp;rdquo; )
func BenchmarkMultiplication(b *testing.B){
b.ResetTimer() // Resets timer so that the values are accurate
for i := 0; i&amp;lt;b.</description>
    </item>
    
    <item>
      <title>Custom user Agent for testing</title>
      <link>https://suriya.cc/tech/hacks/custom_ua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/hacks/custom_ua/</guid>
      <description>A user-agent is used to recognize the browser and the device the project, whatismybrowser.com have a database of user agents it&amp;rsquo;s just a string that says about your browser and device type that is sent as a cookie in every request. You can find your current user agent by googling &amp;ldquo;what is my user agent&amp;rdquo;
These are incredible in their own interesting way.
But, I was stuck with a problem of trying to simulate a device with user agent and inspect it.</description>
    </item>
    
    <item>
      <title>Docker in Action</title>
      <link>https://suriya.cc/tech/docker_learn/docker-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/docker_learn/docker-in-action/</guid>
      <description>Personal notes from Docker in action book
Dockers use Linux namespaces and cgroups, which have been part of Linux since 2007. Docker does not provide the container technology but it makes it simpler to use. The docker containers are isolated with respect to eight aspects.
PID namespace - process identifiers and capabilities UTS namespace - Host and domain name MNT namespace - File system access and structure IPC namespace - process communication over shared memory NET namespace 0 Network access and structure USR namespace - User names and identifiers chroot() - controls the location of the file system root cgroups - Resource protection Linux namespaces and cgroups take care of containers at runtime.</description>
    </item>
    
    <item>
      <title>Effective go practice</title>
      <link>https://suriya.cc/tech/golang_learn/Effective_go/01_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Effective_go/01_intro/</guid>
      <description>Formatting There is no need to align content or comment go fmt does that for you.
go fmt &amp;lt;file_path&amp;gt; formats the file that is given
commentary Go provides C-style /**/ block comments and c++ style // line comments. godoc is used processes go source files to extract documentation about the contents of the package.
Comments appear before top-level declaration, with no intervening newlines, are extracted along with the declaration to serve as explanatory text for the item.</description>
    </item>
    
    <item>
      <title>Javascript for impatient programmers</title>
      <link>https://suriya.cc/tech/js_learn/impatient_js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/impatient_js/</guid>
      <description>These are my notes from following the excellent book, javascript for impatient programmers by axel Rauschmayer</description>
    </item>
    
    <item>
      <title>Learning golang 01 - Basics</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/01_Intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/01_Intro/</guid>
      <description>Intro Every go program is made of packages and &amp;ldquo;main&amp;rdquo; package is run first. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { fmt.Println(&amp;#34;My favorite number is&amp;#34;, rand.Intn(10)) } In the above program math/rand has a file with the first statement package rand
Import statements these are called factored imports
import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) imports can be done this way as well
import &amp;#34;fmt&amp;#34; import &amp;#34;math/rand&amp;#34; Functions functions can take zero or more variables.</description>
    </item>
    
    <item>
      <title>Learning golang 02 - DS and algo</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/02_Data_structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/02_Data_structures/</guid>
      <description>Arrays The type [n]T creates an array of n values of type T.
var a [10]int //Creates an array &amp;#39;a&amp;#39; of int type with size 10 Slices An array has a fixed size. A slice is dynamically-sized The type []T is a slice of elements with type T Slices require high and low point in the array [low:high]
package main import &amp;#34;fmt&amp;#34; func main(){ v := [6]int{1,2,3,4,5,6} var s []int = v[2:5] fmt.</description>
    </item>
    
    <item>
      <title>Learning golang 03 - Functions</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/03_Functions_and_pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/03_Functions_and_pointers/</guid>
      <description>Functions and pointers Functions can receive pointers. Any change to the pointer would change the value.
package main import &amp;#34;fmt&amp;#34; func change(v *int) { *v = 10 // ^ required, mentioning that the base value is being changed } func main() { a := 12 change(&amp;amp;a) // ^ sending argument as pointer. Throws an error if not. fmt.Println(a) } Function closures A function closure references variable from outside the function. Each closure is left to its own values</description>
    </item>
    
    <item>
      <title>Learning golang 04 - Goroutine</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/04_goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/04_goroutines/</guid>
      <description>Goroutines Goroutine is a lightweight thread managed by the Go runtime. a &amp;ldquo;thread&amp;rdquo; does not mean virtual thread or even multiple thread. it is like async await. meaning there is one main thread and multiple seperate &amp;ldquo;threads&amp;rdquo; spawned which are technically running in the same thread instead of spawning one for every process. Each of these threads are blocked when a blocking process is run. and repicked when it is done.</description>
    </item>
    
    <item>
      <title>Learning golang using Go By Example</title>
      <link>https://suriya.cc/tech/golang_learn/Go_by_example/GO_BY_EXAMPLE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_by_example/GO_BY_EXAMPLE/</guid>
      <description>go by example. Following eli bendersky&amp;rsquo;s gobyexample.com tutorial the idea is to capture only things that were not clear in the go tour.
for loops there are no while loops in go. only for. There are multiple ways to declare a for loop. package main import (&amp;#34;fmt&amp;#34;) func main(){ i := 2 // most basic type, with a single condition for i&amp;lt;=3{ fmt.Println(i) i+i=1 } // looping with initial/condition/after for j:=7; j&amp;lt;=9; j++ { fmt.</description>
    </item>
    
    <item>
      <title>live</title>
      <link>https://suriya.cc/live/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/live/</guid>
      <description>I&amp;rsquo;ll add the list of live stream videos here. 🎉</description>
    </item>
    
    <item>
      <title>Now</title>
      <link>https://suriya.cc/now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/now/</guid>
      <description>Things I&amp;rsquo;m focusing on right now
220306
[] Learning OSTEP [] Building a chrome extension 211213
[] Build my own self hosted music player [] Learn docker using the book Docker in action 211113
[] Learning js [] Build an authentication, authorization and role management software. Complete YCombinator&amp;rsquo;s startup school course </description>
    </item>
    
    <item>
      <title>Readlog</title>
      <link>https://suriya.cc/readlog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/readlog/</guid>
      <description>2022-07-07 Sequoia and Tiger Global Take SoftBank to the Cleaners Hello World - unexpected NUL in input 2022-07-06 How I arrived at my perfect business idea Don’t Kill Time 2022-07-05 How An OG YouTube Creator Thinks About the Rise of TikTok THE FIRST MILLION-TRANSISTOR CHIP: THE ENGINEERS’ STORY Pijul Never set a goal that a dead person can do better than you 2022-07-04 Golang autoreload on Goland (Jetbrains IDE)? Carnivorous plant that traps prey underground is the 1st of its kind to be discovered Mr.</description>
    </item>
    
    <item>
      <title>Suriya</title>
      <link>https://suriya.cc/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/toc/</guid>
      <description>{{ site.pages | directory_get:page.url }}</description>
    </item>
    
    <item>
      <title>To Consume</title>
      <link>https://suriya.cc/to_consume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/to_consume/</guid>
      <description>Blog posts Everything you ever wanted to know about terminals http://xn--rpa.cc/irl/term.html Signal: You were the chosen one [video] https://media.ccc.de/v/mch2022-196-signal-you-were-the-chosen-one- The untold story of sqlite https://corecursive.com/066-sqlite-with-richard-hipp/# ✅ notes 100,000 unique test cases. &amp;gt; 1B unique test cases. Modified condition Decision coverage (MCDC) is a way to test the condition of a decision. Writing everything from scratch to maintain freedom and control. SCM, Query parser, TH3, etc. small books post quantum cryptography Books Algorithms for decision making https://algorithmsbook.</description>
    </item>
    
    <item>
      <title>TODO</title>
      <link>https://suriya.cc/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/todo/</guid>
      <description>6 Aug 2022 Setup Table of contents for blog [] Finish chat box polling for new messages 1 Aug 2022 Setup collapsible bar for seeing blog posts Finish chat box polling for new messages. 31 Jul 2022 Setup collapsible bar for seeing blog posts Finish dissertation submission </description>
    </item>
    
  </channel>
</rss>
