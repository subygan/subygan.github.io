<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning golang on Suriya&#39;s site</title>
    <link>https://suriya.cc/tech/golang_learn/</link>
    <description>Recent content in Learning golang on Suriya&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://suriya.cc/tech/golang_learn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://suriya.cc/tech/golang_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/README/</guid>
      <description>Learning Golang Resources and stuff captured, while learning golang
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) ### Articles List of articles I found useful. - [https://nathany.com/good/](https://nathany.com/good/) - https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go - https://go.dev/blog/error-handling-and-go - https://morsmachine.dk/go-scheduler ### Other resources - gobyexample.com </description>
    </item>
    
    <item>
      <title>Benchmarking</title>
      <link>https://suriya.cc/tech/golang_learn/benchmarking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/benchmarking/</guid>
      <description>Benchmarking tools are built-in with the &amp;ldquo;testing&amp;rdquo; package
These can be done by writing test files of the format &amp;ldquo;_test.go&amp;rdquo;
Then creating functions with the prefix Benchmark, like so. func Benchmark&amp;lt;name&amp;gt;(b *testing.B)
a simple function that tests a simple multiplication function would be
{% highlight golang linenos %} package go_test import ( &amp;ldquo;testing&amp;rdquo; &amp;ldquo;math/rand&amp;rdquo; )
func BenchmarkMultiplication(b *testing.B){
b.ResetTimer() // Resets timer so that the values are accurate
for i := 0; i&amp;lt;b.</description>
    </item>
    
    <item>
      <title>Effective go practice</title>
      <link>https://suriya.cc/tech/golang_learn/Effective_go/01_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Effective_go/01_intro/</guid>
      <description>Formatting There is no need to align content or comment go fmt does that for you.
go fmt &amp;lt;file_path&amp;gt; formats the file that is given
commentary Go provides C-style /**/ block comments and c++ style // line comments. godoc is used processes go source files to extract documentation about the contents of the package.
Comments appear before top-level declaration, with no intervening newlines, are extracted along with the declaration to serve as explanatory text for the item.</description>
    </item>
    
    <item>
      <title>Learning golang 01 - Basics</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/01_Intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/01_Intro/</guid>
      <description>Intro Every go program is made of packages and &amp;ldquo;main&amp;rdquo; package is run first. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { fmt.Println(&amp;#34;My favorite number is&amp;#34;, rand.Intn(10)) } In the above program math/rand has a file with the first statement package rand
Import statements these are called factored imports
import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) imports can be done this way as well
import &amp;#34;fmt&amp;#34; import &amp;#34;math/rand&amp;#34; Functions functions can take zero or more variables.</description>
    </item>
    
    <item>
      <title>Learning golang 02 - DS and algo</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/02_Data_structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/02_Data_structures/</guid>
      <description>Arrays The type [n]T creates an array of n values of type T.
var a [10]int //Creates an array &amp;#39;a&amp;#39; of int type with size 10 Slices An array has a fixed size. A slice is dynamically-sized The type []T is a slice of elements with type T Slices require high and low point in the array [low:high]
package main import &amp;#34;fmt&amp;#34; func main(){ v := [6]int{1,2,3,4,5,6} var s []int = v[2:5] fmt.</description>
    </item>
    
    <item>
      <title>Learning golang 03 - Functions</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/03_Functions_and_pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/03_Functions_and_pointers/</guid>
      <description>Functions and pointers Functions can receive pointers. Any change to the pointer would change the value.
package main import &amp;#34;fmt&amp;#34; func change(v *int) { *v = 10 // ^ required, mentioning that the base value is being changed } func main() { a := 12 change(&amp;amp;a) // ^ sending argument as pointer. Throws an error if not. fmt.Println(a) } Function closures A function closure references variable from outside the function. Each closure is left to its own values</description>
    </item>
    
    <item>
      <title>Learning golang 04 - Goroutine</title>
      <link>https://suriya.cc/tech/golang_learn/Go_tour/04_goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_tour/04_goroutines/</guid>
      <description>Goroutines Goroutine is a lightweight thread managed by the Go runtime. a &amp;ldquo;thread&amp;rdquo; does not mean virtual thread or even multiple thread. it is like async await. meaning there is one main thread and multiple seperate &amp;ldquo;threads&amp;rdquo; spawned which are technically running in the same thread instead of spawning one for every process. Each of these threads are blocked when a blocking process is run. and repicked when it is done.</description>
    </item>
    
    <item>
      <title>Learning golang using Go By Example</title>
      <link>https://suriya.cc/tech/golang_learn/Go_by_example/GO_BY_EXAMPLE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/golang_learn/Go_by_example/GO_BY_EXAMPLE/</guid>
      <description>go by example. Following eli bendersky&amp;rsquo;s gobyexample.com tutorial the idea is to capture only things that were not clear in the go tour.
for loops there are no while loops in go. only for. There are multiple ways to declare a for loop. package main import (&amp;#34;fmt&amp;#34;) func main(){ i := 2 // most basic type, with a single condition for i&amp;lt;=3{ fmt.Println(i) i+i=1 } // looping with initial/condition/after for j:=7; j&amp;lt;=9; j++ { fmt.</description>
    </item>
    
  </channel>
</rss>
