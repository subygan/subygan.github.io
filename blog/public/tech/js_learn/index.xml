<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning JavaScript on Suriya&#39;s site</title>
    <link>https://suriya.cc/tech/js_learn/</link>
    <description>Recent content in Learning JavaScript on Suriya&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://suriya.cc/tech/js_learn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/00_let/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/00_let/</guid>
      <description>Understanding let and var The let keyword creates a new variable locally. it is not attached to the global object
let x = 10; //creating a variable if x == 10 { let x = 20; console.log(x); //prints 20 } console.log(x); //prints 10 // ^^^ This x comes from above The var keyword creates a new variable globally.
var a = 10; let b = 10; console.log(window.a); //10 :because the variable is available globally console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/01_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/01_const/</guid>
      <description>Understanding const The const keyword creates a read-only reference to a value.
const CONSTANT_NAME = value; By convention, the constant identifiers are in uppercase. it can be lower case as well though. the variable made from let and var are mutable. But, const can&amp;rsquo;t be changed
const RATE = 0.1; RATE = 0.2; //TypeError Declaring a const without initialising with a value also creates a SyntaxError
const RED; //SyntaxError JavaScript const and Objects The const keyword ensures that the variable it creates is read-only.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/02_default_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/02_default_params/</guid>
      <description>Default Prameters TL;DR function say(message=&amp;#39;Hi&amp;#39;) { console.log(message) } say(); // &amp;#39;Hi&amp;#39; say(&amp;#39;Hello&amp;#39;); //&amp;#39;Hello&amp;#39; Arguments vs Parameters Parameters - what is specified in the function declaration
Arguments - what is passed to the function
function add(x,y) { // ^ ^ Parameters return x+y; } add(100, 200); // ^^^ ^^^ Arguments </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/03_rest_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/03_rest_params/</guid>
      <description>JavaScript rest parameters The rest parameter, shown as (...). A rest parameter allows you to represent an indefinite number of arguments as an array.
function fn(a,b,...args) { // ^^^^^^^ rest parameter available as an array of elements for (const a of args){ //do something with a } } rest parameters are available as an array
wrong way to declare a rest parameter function fn(a,...rest,b) { //error } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/04_spread_operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/04_spread_operator/</guid>
      <description>Using Spread operators Spread operators are used to combine arrays, maps or set.
const odd = [1,3,5]; const combined = [2,4,6, ...odd]; //valid spread const combined1 = [2, ...odd, 4, 6]; //valid as well console.log(combined); // [2,4,6,1,3,5] console.log(combined1); // [2,1,3,5,4,6] the syntax is similar to rest params
Using spread params: var variables = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]; var newvars = [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]; variables.push(...newvars); console.log(variables); // [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] concatenating arrays
let num = [1,2]; let num2 = [3,4]; let allnums = [.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/05_object_literal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/05_object_literal/</guid>
      <description>object literal The goal of this moodely is to make object literals more succinct and powerful by extending the syntax in some ways.
Object property initializer shorthand function createMachine(name, status) { //old way of initializing object return { name: name, status: status } } function createMachineNew(name, status){ //new way of initializing object return { name, status } } other ways of initialising
name = &amp;#39;computer&amp;#39;; status = &amp;#39;on&amp;#39;; //This works as well let machine = { name, status }; Computed property name Prior to ES6, you could use the square brackets ([]) to enable the computed property names for the properties on objects.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://suriya.cc/tech/js_learn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/README/</guid>
      <description>js_learn Js is necessary, to be a self sufficient &amp;ldquo;developer&amp;rdquo;. To be able to deliver valuable software to people, in a reliable way. I would be documenting about my learnings here.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</description>
    </item>
    
    <item>
      <title>Javascript for impatient programmers</title>
      <link>https://suriya.cc/tech/js_learn/impatient_js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://suriya.cc/tech/js_learn/impatient_js/</guid>
      <description>These are my notes from following the excellent book, javascript for impatient programmers by axel Rauschmayer</description>
    </item>
    
  </channel>
</rss>
